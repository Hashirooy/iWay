{"name": "test_chitgorod", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: chrome not reachable\n  (Session info: chrome=87.0.4280.141)", "trace": "self = <test_gorod.TestChitaygorod object at 0x000001F5F03EE940>\n\n    @allure.feature('Test chitGorod')\n    @allure.story('Search field')\n    def test_chitgorod(self):\n        self.browser = webdriver.Chrome()\n        city = self.browser.get('https://www.chitai-gorod.ru/')\n        self.browser.title == \"Читай-город — интернет-магазин книг\"\n        searchField = self.browser.find_element_by_name('q')\n        searchField.send_keys('Тестирование')\n        buttonSearch = self.browser.find_element_by_xpath('/html/body/div[2]/header/div[2]/div[3]/div/form/button')\n        buttonSearch.click()\n        time.sleep(5)\n        cardTree = self.browser.find_element_by_xpath('/html/body/div[2]/main/div[1]/div/div[2]/div[5]/div[3]')\n        cardTreePrice = cardTree.get_attribute('data-productprice')\n        cardTreeTitle = self.browser.find_element_by_xpath('/html/body/div[2]/main/div[1]/div/div[2]/div[5]/div[3]/div[2]/a/div[1]').text\n        cardOne = self.browser.find_element_by_xpath('/html/body/div[2]/main/div[1]/div/div[2]/div[5]/div[2]')\n        cardOnePrice = cardOne.get_attribute('data-productprice')\n        cardOneTitle =self.browser.find_element_by_xpath('/html/body/div[2]/main/div[1]/div/div[2]/div[5]/div[2]/div[2]/a/div[1]').text\n        cardTwo = self.browser.find_element_by_xpath('/html/body/div[2]/main/div[1]/div/div[2]/div[5]/div[1]')\n        cardTwoPrice = cardTwo.get_attribute('data-productprice')\n        cardTwoTitle = self.browser.find_element_by_xpath('/html/body/div[2]/main/div[1]/div/div[2]/div[5]/div[1]/div[2]/a/div[1]').text\n        buttOne = self.browser.find_element_by_xpath('/html/body/div[2]/main/div[1]/div/div[2]/div[5]/div[1]/div[2]/div[3]/button').click()\n        buttTwo = self.browser.find_element_by_xpath('/html/body/div[2]/main/div[1]/div/div[2]/div[5]/div[2]/div[2]/div[3]/button').click()\n        buttTree = self.browser.find_element_by_xpath('/html/body/div[2]/main/div[1]/div/div[2]/div[5]/div[3]/div[2]/div[3]/button').click()\n        time.sleep(5)\n        sumAllBook = int(cardOnePrice) + int(cardTwoPrice) + int(cardTreePrice)\n        time.sleep(5)\n        buttTree = self.browser.find_element_by_xpath('/html/body/div[2]/main/div[1]/div/div[2]/div[5]/div[3]/div[2]/div[3]/button').click()\n        allBook = self.browser.find_element_by_xpath('/html/body/div[2]/header/div[2]/div[3]/div/div[2]/div/a[1]/span[2]')\n        basketOneBook = self.browser.find_element_by_xpath('/html/body/div[2]/main/div/div[2]/div/div[1]/div[3]/div[1]/div/div[1]/div[1]/div[1]').text\n        basketTwoBook = self.browser.find_element_by_xpath('/html/body/div[2]/main/div/div[2]/div/div[1]/div[3]/div[2]/div/div[1]/div[1]/div[1]').text\n        basketTreeBook = self.browser.find_element_by_xpath('/html/body/div[2]/main/div/div[2]/div/div[1]/div[3]/div[3]/div/div[1]/div[1]/div[1]').text\n        basketSum = self.browser.find_element_by_xpath('/html/body/div[2]/main/div/div[2]/div/div[2]/div/div/div[2]/div[2]/span')\n        assert int(basketSum.text) == sumAllBook\n        assert allBook.text == '3'\n        assert basketOneBook == cardTwoTitle and basketTwoBook == cardOneTitle and basketTreeBook == cardTreeTitle\n        delBook = self.browser.find_element_by_xpath('/html/body/div[2]/main/div/div[2]/div/div[1]/div[3]/div[3]/div/div[3]/div[2]').click()\n        time.sleep(3)\n>       assert allBook.text == '2'\n\ntest_gorod.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nc:\\users\\balu\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:76: in text\n    return self._execute(Command.GET_ELEMENT_TEXT)['value']\nc:\\users\\balu\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:633: in _execute\n    return self._parent.execute(command, params)\nc:\\users\\balu\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F5F0401700>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"chrome not reachable\",\"message\":\"chrome not reachable\\\\n  (Session info: ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x775275F4+228]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x775275C4+180]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: chrome not reachable\nE         (Session info: chrome=87.0.4280.141)\n\nc:\\users\\balu\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: WebDriverException"}, "start": 1611468614149, "stop": 1611468652408, "uuid": "cf6b95c9-4609-4140-8840-98dbb8fde491", "historyId": "65d2adb8f08c697522d186c0c3b3cabe", "testCaseId": "582ed9db769895b123746d598381a342", "fullName": "test_gorod.TestChitaygorod#test_chitgorod", "labels": [{"name": "feature", "value": "Test chitGorod"}, {"name": "story", "value": "Search field"}, {"name": "suite", "value": "test_gorod"}, {"name": "subSuite", "value": "TestChitaygorod"}, {"name": "host", "value": "DESKTOP-0RM8SMG"}, {"name": "thread", "value": "12612-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_gorod"}]}